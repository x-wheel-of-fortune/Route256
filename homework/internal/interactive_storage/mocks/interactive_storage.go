// Code generated by MockGen. DO NOT EDIT.
// Source: ./interactive_storage.go

// Package mock_interactive_storage is a generated GoMock package.
package mock_interactive_storage

import (
	model "homework/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInteractiveStorage is a mock of InteractiveStorage interface.
type MockInteractiveStorage struct {
	ctrl     *gomock.Controller
	recorder *MockInteractiveStorageMockRecorder
}

// MockInteractiveStorageMockRecorder is the mock recorder for MockInteractiveStorage.
type MockInteractiveStorageMockRecorder struct {
	mock *MockInteractiveStorage
}

// NewMockInteractiveStorage creates a new mock instance.
func NewMockInteractiveStorage(ctrl *gomock.Controller) *MockInteractiveStorage {
	mock := &MockInteractiveStorage{ctrl: ctrl}
	mock.recorder = &MockInteractiveStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractiveStorage) EXPECT() *MockInteractiveStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockInteractiveStorage) Add(newPoint model.PickupPoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", newPoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockInteractiveStorageMockRecorder) Add(newPoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockInteractiveStorage)(nil).Add), newPoint)
}

// Get mocks base method.
func (m *MockInteractiveStorage) Get(id int) (model.PickupPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(model.PickupPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInteractiveStorageMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInteractiveStorage)(nil).Get), id)
}
